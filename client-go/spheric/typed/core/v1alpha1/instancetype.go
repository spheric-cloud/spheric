// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
	corev1alpha1 "spheric.cloud/spheric/client-go/applyconfigurations/core/v1alpha1"
	scheme "spheric.cloud/spheric/client-go/spheric/scheme"
)

// InstanceTypesGetter has a method to return a InstanceTypeInterface.
// A group's client should implement this interface.
type InstanceTypesGetter interface {
	InstanceTypes() InstanceTypeInterface
}

// InstanceTypeInterface has methods to work with InstanceType resources.
type InstanceTypeInterface interface {
	Create(ctx context.Context, instanceType *v1alpha1.InstanceType, opts v1.CreateOptions) (*v1alpha1.InstanceType, error)
	Update(ctx context.Context, instanceType *v1alpha1.InstanceType, opts v1.UpdateOptions) (*v1alpha1.InstanceType, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.InstanceType, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.InstanceTypeList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.InstanceType, err error)
	Apply(ctx context.Context, instanceType *corev1alpha1.InstanceTypeApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.InstanceType, err error)
	InstanceTypeExpansion
}

// instanceTypes implements InstanceTypeInterface
type instanceTypes struct {
	*gentype.ClientWithListAndApply[*v1alpha1.InstanceType, *v1alpha1.InstanceTypeList, *corev1alpha1.InstanceTypeApplyConfiguration]
}

// newInstanceTypes returns a InstanceTypes
func newInstanceTypes(c *CoreV1alpha1Client) *instanceTypes {
	return &instanceTypes{
		gentype.NewClientWithListAndApply[*v1alpha1.InstanceType, *v1alpha1.InstanceTypeList, *corev1alpha1.InstanceTypeApplyConfiguration](
			"instancetypes",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1alpha1.InstanceType { return &v1alpha1.InstanceType{} },
			func() *v1alpha1.InstanceTypeList { return &v1alpha1.InstanceTypeList{} }),
	}
}
