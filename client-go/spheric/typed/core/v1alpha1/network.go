// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
	corev1alpha1 "spheric.cloud/spheric/client-go/applyconfigurations/core/v1alpha1"
	scheme "spheric.cloud/spheric/client-go/spheric/scheme"
)

// NetworksGetter has a method to return a NetworkInterface.
// A group's client should implement this interface.
type NetworksGetter interface {
	Networks(namespace string) NetworkInterface
}

// NetworkInterface has methods to work with Network resources.
type NetworkInterface interface {
	Create(ctx context.Context, network *v1alpha1.Network, opts v1.CreateOptions) (*v1alpha1.Network, error)
	Update(ctx context.Context, network *v1alpha1.Network, opts v1.UpdateOptions) (*v1alpha1.Network, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, network *v1alpha1.Network, opts v1.UpdateOptions) (*v1alpha1.Network, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.Network, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.NetworkList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Network, err error)
	Apply(ctx context.Context, network *corev1alpha1.NetworkApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.Network, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, network *corev1alpha1.NetworkApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.Network, err error)
	NetworkExpansion
}

// networks implements NetworkInterface
type networks struct {
	*gentype.ClientWithListAndApply[*v1alpha1.Network, *v1alpha1.NetworkList, *corev1alpha1.NetworkApplyConfiguration]
}

// newNetworks returns a Networks
func newNetworks(c *CoreV1alpha1Client, namespace string) *networks {
	return &networks{
		gentype.NewClientWithListAndApply[*v1alpha1.Network, *v1alpha1.NetworkList, *corev1alpha1.NetworkApplyConfiguration](
			"networks",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.Network { return &v1alpha1.Network{} },
			func() *v1alpha1.NetworkList { return &v1alpha1.NetworkList{} }),
	}
}
