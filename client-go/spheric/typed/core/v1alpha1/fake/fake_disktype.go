// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
	corev1alpha1 "spheric.cloud/spheric/client-go/applyconfigurations/core/v1alpha1"
)

// FakeDiskTypes implements DiskTypeInterface
type FakeDiskTypes struct {
	Fake *FakeCoreV1alpha1
}

var disktypesResource = v1alpha1.SchemeGroupVersion.WithResource("disktypes")

var disktypesKind = v1alpha1.SchemeGroupVersion.WithKind("DiskType")

// Get takes name of the diskType, and returns the corresponding diskType object, and an error if there is any.
func (c *FakeDiskTypes) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.DiskType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(disktypesResource, name), &v1alpha1.DiskType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DiskType), err
}

// List takes label and field selectors, and returns the list of DiskTypes that match those selectors.
func (c *FakeDiskTypes) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.DiskTypeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(disktypesResource, disktypesKind, opts), &v1alpha1.DiskTypeList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.DiskTypeList{ListMeta: obj.(*v1alpha1.DiskTypeList).ListMeta}
	for _, item := range obj.(*v1alpha1.DiskTypeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested diskTypes.
func (c *FakeDiskTypes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(disktypesResource, opts))
}

// Create takes the representation of a diskType and creates it.  Returns the server's representation of the diskType, and an error, if there is any.
func (c *FakeDiskTypes) Create(ctx context.Context, diskType *v1alpha1.DiskType, opts v1.CreateOptions) (result *v1alpha1.DiskType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(disktypesResource, diskType), &v1alpha1.DiskType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DiskType), err
}

// Update takes the representation of a diskType and updates it. Returns the server's representation of the diskType, and an error, if there is any.
func (c *FakeDiskTypes) Update(ctx context.Context, diskType *v1alpha1.DiskType, opts v1.UpdateOptions) (result *v1alpha1.DiskType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(disktypesResource, diskType), &v1alpha1.DiskType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DiskType), err
}

// Delete takes name of the diskType and deletes it. Returns an error if one occurs.
func (c *FakeDiskTypes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(disktypesResource, name, opts), &v1alpha1.DiskType{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDiskTypes) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(disktypesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.DiskTypeList{})
	return err
}

// Patch applies the patch and returns the patched diskType.
func (c *FakeDiskTypes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.DiskType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(disktypesResource, name, pt, data, subresources...), &v1alpha1.DiskType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DiskType), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied diskType.
func (c *FakeDiskTypes) Apply(ctx context.Context, diskType *corev1alpha1.DiskTypeApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.DiskType, err error) {
	if diskType == nil {
		return nil, fmt.Errorf("diskType provided to Apply must not be nil")
	}
	data, err := json.Marshal(diskType)
	if err != nil {
		return nil, err
	}
	name := diskType.Name
	if name == nil {
		return nil, fmt.Errorf("diskType.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(disktypesResource, *name, types.ApplyPatchType, data), &v1alpha1.DiskType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DiskType), err
}
