// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
	corev1alpha1 "spheric.cloud/spheric/client-go/applyconfigurations/core/v1alpha1"
)

// FakeInstanceTypes implements InstanceTypeInterface
type FakeInstanceTypes struct {
	Fake *FakeCoreV1alpha1
}

var instancetypesResource = v1alpha1.SchemeGroupVersion.WithResource("instancetypes")

var instancetypesKind = v1alpha1.SchemeGroupVersion.WithKind("InstanceType")

// Get takes name of the instanceType, and returns the corresponding instanceType object, and an error if there is any.
func (c *FakeInstanceTypes) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.InstanceType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(instancetypesResource, name), &v1alpha1.InstanceType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InstanceType), err
}

// List takes label and field selectors, and returns the list of InstanceTypes that match those selectors.
func (c *FakeInstanceTypes) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.InstanceTypeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(instancetypesResource, instancetypesKind, opts), &v1alpha1.InstanceTypeList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.InstanceTypeList{ListMeta: obj.(*v1alpha1.InstanceTypeList).ListMeta}
	for _, item := range obj.(*v1alpha1.InstanceTypeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested instanceTypes.
func (c *FakeInstanceTypes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(instancetypesResource, opts))
}

// Create takes the representation of a instanceType and creates it.  Returns the server's representation of the instanceType, and an error, if there is any.
func (c *FakeInstanceTypes) Create(ctx context.Context, instanceType *v1alpha1.InstanceType, opts v1.CreateOptions) (result *v1alpha1.InstanceType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(instancetypesResource, instanceType), &v1alpha1.InstanceType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InstanceType), err
}

// Update takes the representation of a instanceType and updates it. Returns the server's representation of the instanceType, and an error, if there is any.
func (c *FakeInstanceTypes) Update(ctx context.Context, instanceType *v1alpha1.InstanceType, opts v1.UpdateOptions) (result *v1alpha1.InstanceType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(instancetypesResource, instanceType), &v1alpha1.InstanceType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InstanceType), err
}

// Delete takes name of the instanceType and deletes it. Returns an error if one occurs.
func (c *FakeInstanceTypes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(instancetypesResource, name, opts), &v1alpha1.InstanceType{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeInstanceTypes) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(instancetypesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.InstanceTypeList{})
	return err
}

// Patch applies the patch and returns the patched instanceType.
func (c *FakeInstanceTypes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.InstanceType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(instancetypesResource, name, pt, data, subresources...), &v1alpha1.InstanceType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InstanceType), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied instanceType.
func (c *FakeInstanceTypes) Apply(ctx context.Context, instanceType *corev1alpha1.InstanceTypeApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.InstanceType, err error) {
	if instanceType == nil {
		return nil, fmt.Errorf("instanceType provided to Apply must not be nil")
	}
	data, err := json.Marshal(instanceType)
	if err != nil {
		return nil, err
	}
	name := instanceType.Name
	if name == nil {
		return nil, fmt.Errorf("instanceType.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(instancetypesResource, *name, types.ApplyPatchType, data), &v1alpha1.InstanceType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InstanceType), err
}
