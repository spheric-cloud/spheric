// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
	corev1alpha1 "spheric.cloud/spheric/client-go/applyconfigurations/core/v1alpha1"
	scheme "spheric.cloud/spheric/client-go/spheric/scheme"
)

// DiskTypesGetter has a method to return a DiskTypeInterface.
// A group's client should implement this interface.
type DiskTypesGetter interface {
	DiskTypes() DiskTypeInterface
}

// DiskTypeInterface has methods to work with DiskType resources.
type DiskTypeInterface interface {
	Create(ctx context.Context, diskType *v1alpha1.DiskType, opts v1.CreateOptions) (*v1alpha1.DiskType, error)
	Update(ctx context.Context, diskType *v1alpha1.DiskType, opts v1.UpdateOptions) (*v1alpha1.DiskType, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.DiskType, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.DiskTypeList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.DiskType, err error)
	Apply(ctx context.Context, diskType *corev1alpha1.DiskTypeApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.DiskType, err error)
	DiskTypeExpansion
}

// diskTypes implements DiskTypeInterface
type diskTypes struct {
	*gentype.ClientWithListAndApply[*v1alpha1.DiskType, *v1alpha1.DiskTypeList, *corev1alpha1.DiskTypeApplyConfiguration]
}

// newDiskTypes returns a DiskTypes
func newDiskTypes(c *CoreV1alpha1Client) *diskTypes {
	return &diskTypes{
		gentype.NewClientWithListAndApply[*v1alpha1.DiskType, *v1alpha1.DiskTypeList, *corev1alpha1.DiskTypeApplyConfiguration](
			"disktypes",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1alpha1.DiskType { return &v1alpha1.DiskType{} },
			func() *v1alpha1.DiskTypeList { return &v1alpha1.DiskTypeList{} }),
	}
}
