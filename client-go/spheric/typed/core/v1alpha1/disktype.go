// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
	corev1alpha1 "spheric.cloud/spheric/client-go/applyconfigurations/core/v1alpha1"
	scheme "spheric.cloud/spheric/client-go/spheric/scheme"
)

// DiskTypesGetter has a method to return a DiskTypeInterface.
// A group's client should implement this interface.
type DiskTypesGetter interface {
	DiskTypes() DiskTypeInterface
}

// DiskTypeInterface has methods to work with DiskType resources.
type DiskTypeInterface interface {
	Create(ctx context.Context, diskType *v1alpha1.DiskType, opts v1.CreateOptions) (*v1alpha1.DiskType, error)
	Update(ctx context.Context, diskType *v1alpha1.DiskType, opts v1.UpdateOptions) (*v1alpha1.DiskType, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.DiskType, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.DiskTypeList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.DiskType, err error)
	Apply(ctx context.Context, diskType *corev1alpha1.DiskTypeApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.DiskType, err error)
	DiskTypeExpansion
}

// diskTypes implements DiskTypeInterface
type diskTypes struct {
	client rest.Interface
}

// newDiskTypes returns a DiskTypes
func newDiskTypes(c *CoreV1alpha1Client) *diskTypes {
	return &diskTypes{
		client: c.RESTClient(),
	}
}

// Get takes name of the diskType, and returns the corresponding diskType object, and an error if there is any.
func (c *diskTypes) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.DiskType, err error) {
	result = &v1alpha1.DiskType{}
	err = c.client.Get().
		Resource("disktypes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of DiskTypes that match those selectors.
func (c *diskTypes) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.DiskTypeList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.DiskTypeList{}
	err = c.client.Get().
		Resource("disktypes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested diskTypes.
func (c *diskTypes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("disktypes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a diskType and creates it.  Returns the server's representation of the diskType, and an error, if there is any.
func (c *diskTypes) Create(ctx context.Context, diskType *v1alpha1.DiskType, opts v1.CreateOptions) (result *v1alpha1.DiskType, err error) {
	result = &v1alpha1.DiskType{}
	err = c.client.Post().
		Resource("disktypes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(diskType).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a diskType and updates it. Returns the server's representation of the diskType, and an error, if there is any.
func (c *diskTypes) Update(ctx context.Context, diskType *v1alpha1.DiskType, opts v1.UpdateOptions) (result *v1alpha1.DiskType, err error) {
	result = &v1alpha1.DiskType{}
	err = c.client.Put().
		Resource("disktypes").
		Name(diskType.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(diskType).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the diskType and deletes it. Returns an error if one occurs.
func (c *diskTypes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("disktypes").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *diskTypes) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("disktypes").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched diskType.
func (c *diskTypes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.DiskType, err error) {
	result = &v1alpha1.DiskType{}
	err = c.client.Patch(pt).
		Resource("disktypes").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied diskType.
func (c *diskTypes) Apply(ctx context.Context, diskType *corev1alpha1.DiskTypeApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.DiskType, err error) {
	if diskType == nil {
		return nil, fmt.Errorf("diskType provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(diskType)
	if err != nil {
		return nil, err
	}
	name := diskType.Name
	if name == nil {
		return nil, fmt.Errorf("diskType.Name must be provided to Apply")
	}
	result = &v1alpha1.DiskType{}
	err = c.client.Patch(types.ApplyPatchType).
		Resource("disktypes").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
