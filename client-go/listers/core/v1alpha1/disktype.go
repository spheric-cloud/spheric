// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
)

// DiskTypeLister helps list DiskTypes.
// All objects returned here must be treated as read-only.
type DiskTypeLister interface {
	// List lists all DiskTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskType, err error)
	// Get retrieves the DiskType from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DiskType, error)
	DiskTypeListerExpansion
}

// diskTypeLister implements the DiskTypeLister interface.
type diskTypeLister struct {
	indexer cache.Indexer
}

// NewDiskTypeLister returns a new DiskTypeLister.
func NewDiskTypeLister(indexer cache.Indexer) DiskTypeLister {
	return &diskTypeLister{indexer: indexer}
}

// List lists all DiskTypes in the indexer.
func (s *diskTypeLister) List(selector labels.Selector) (ret []*v1alpha1.DiskType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskType))
	})
	return ret, err
}

// Get retrieves the DiskType from the index for a given name.
func (s *diskTypeLister) Get(name string) (*v1alpha1.DiskType, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("disktype"), name)
	}
	return obj.(*v1alpha1.DiskType), nil
}
