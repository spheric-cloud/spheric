// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
)

// FleetStatusApplyConfiguration represents an declarative configuration of the FleetStatus type for use
// with apply.
type FleetStatusApplyConfiguration struct {
	State           *v1alpha1.FleetState                    `json:"state,omitempty"`
	Conditions      []FleetConditionApplyConfiguration      `json:"conditions,omitempty"`
	Addresses       []FleetAddressApplyConfiguration        `json:"addresses,omitempty"`
	DaemonEndpoints *FleetDaemonEndpointsApplyConfiguration `json:"daemonEndpoints,omitempty"`
	Capacity        *v1alpha1.ResourceList                  `json:"capacity,omitempty"`
	Allocatable     *v1alpha1.ResourceList                  `json:"allocatable,omitempty"`
}

// FleetStatusApplyConfiguration constructs an declarative configuration of the FleetStatus type for use with
// apply.
func FleetStatus() *FleetStatusApplyConfiguration {
	return &FleetStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *FleetStatusApplyConfiguration) WithState(value v1alpha1.FleetState) *FleetStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *FleetStatusApplyConfiguration) WithConditions(values ...*FleetConditionApplyConfiguration) *FleetStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithAddresses adds the given value to the Addresses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Addresses field.
func (b *FleetStatusApplyConfiguration) WithAddresses(values ...*FleetAddressApplyConfiguration) *FleetStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAddresses")
		}
		b.Addresses = append(b.Addresses, *values[i])
	}
	return b
}

// WithDaemonEndpoints sets the DaemonEndpoints field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DaemonEndpoints field is set to the value of the last call.
func (b *FleetStatusApplyConfiguration) WithDaemonEndpoints(value *FleetDaemonEndpointsApplyConfiguration) *FleetStatusApplyConfiguration {
	b.DaemonEndpoints = value
	return b
}

// WithCapacity sets the Capacity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Capacity field is set to the value of the last call.
func (b *FleetStatusApplyConfiguration) WithCapacity(value v1alpha1.ResourceList) *FleetStatusApplyConfiguration {
	b.Capacity = &value
	return b
}

// WithAllocatable sets the Allocatable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Allocatable field is set to the value of the last call.
func (b *FleetStatusApplyConfiguration) WithAllocatable(value v1alpha1.ResourceList) *FleetStatusApplyConfiguration {
	b.Allocatable = &value
	return b
}
