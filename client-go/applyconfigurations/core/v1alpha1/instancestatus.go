// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
)

// InstanceStatusApplyConfiguration represents an declarative configuration of the InstanceStatus type for use
// with apply.
type InstanceStatusApplyConfiguration struct {
	InstanceID         *string                                    `json:"instanceID,omitempty"`
	ObservedGeneration *int64                                     `json:"observedGeneration,omitempty"`
	State              *v1alpha1.InstanceState                    `json:"state,omitempty"`
	NetworkInterfaces  []NetworkInterfaceStatusApplyConfiguration `json:"networkInterfaces,omitempty"`
	Disks              []AttachedDiskStatusApplyConfiguration     `json:"disks,omitempty"`
}

// InstanceStatusApplyConfiguration constructs an declarative configuration of the InstanceStatus type for use with
// apply.
func InstanceStatus() *InstanceStatusApplyConfiguration {
	return &InstanceStatusApplyConfiguration{}
}

// WithInstanceID sets the InstanceID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstanceID field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithInstanceID(value string) *InstanceStatusApplyConfiguration {
	b.InstanceID = &value
	return b
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithObservedGeneration(value int64) *InstanceStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithState(value v1alpha1.InstanceState) *InstanceStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithNetworkInterfaces adds the given value to the NetworkInterfaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NetworkInterfaces field.
func (b *InstanceStatusApplyConfiguration) WithNetworkInterfaces(values ...*NetworkInterfaceStatusApplyConfiguration) *InstanceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworkInterfaces")
		}
		b.NetworkInterfaces = append(b.NetworkInterfaces, *values[i])
	}
	return b
}

// WithDisks adds the given value to the Disks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Disks field.
func (b *InstanceStatusApplyConfiguration) WithDisks(values ...*AttachedDiskStatusApplyConfiguration) *InstanceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDisks")
		}
		b.Disks = append(b.Disks, *values[i])
	}
	return b
}
