// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// DiskAccessApplyConfiguration represents an declarative configuration of the DiskAccess type for use
// with apply.
type DiskAccessApplyConfiguration struct {
	Driver     *string                                 `json:"driver,omitempty"`
	Handle     *string                                 `json:"handle,omitempty"`
	Attributes map[string]string                       `json:"attributes,omitempty"`
	SecretRef  *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// DiskAccessApplyConfiguration constructs an declarative configuration of the DiskAccess type for use with
// apply.
func DiskAccess() *DiskAccessApplyConfiguration {
	return &DiskAccessApplyConfiguration{}
}

// WithDriver sets the Driver field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Driver field is set to the value of the last call.
func (b *DiskAccessApplyConfiguration) WithDriver(value string) *DiskAccessApplyConfiguration {
	b.Driver = &value
	return b
}

// WithHandle sets the Handle field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Handle field is set to the value of the last call.
func (b *DiskAccessApplyConfiguration) WithHandle(value string) *DiskAccessApplyConfiguration {
	b.Handle = &value
	return b
}

// WithAttributes puts the entries into the Attributes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Attributes field,
// overwriting an existing map entries in Attributes field with the same key.
func (b *DiskAccessApplyConfiguration) WithAttributes(entries map[string]string) *DiskAccessApplyConfiguration {
	if b.Attributes == nil && len(entries) > 0 {
		b.Attributes = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Attributes[k] = v
	}
	return b
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *DiskAccessApplyConfiguration) WithSecretRef(value *LocalObjectReferenceApplyConfiguration) *DiskAccessApplyConfiguration {
	b.SecretRef = value
	return b
}
