// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// SubnetSpecApplyConfiguration represents a declarative configuration of the SubnetSpec type for use
// with apply.
type SubnetSpecApplyConfiguration struct {
	NetworkRef *LocalObjectReferenceApplyConfiguration `json:"networkRef,omitempty"`
	CIDRs      []string                                `json:"cidrs,omitempty"`
}

// SubnetSpecApplyConfiguration constructs a declarative configuration of the SubnetSpec type for use with
// apply.
func SubnetSpec() *SubnetSpecApplyConfiguration {
	return &SubnetSpecApplyConfiguration{}
}

// WithNetworkRef sets the NetworkRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkRef field is set to the value of the last call.
func (b *SubnetSpecApplyConfiguration) WithNetworkRef(value *LocalObjectReferenceApplyConfiguration) *SubnetSpecApplyConfiguration {
	b.NetworkRef = value
	return b
}

// WithCIDRs adds the given value to the CIDRs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CIDRs field.
func (b *SubnetSpecApplyConfiguration) WithCIDRs(values ...string) *SubnetSpecApplyConfiguration {
	for i := range values {
		b.CIDRs = append(b.CIDRs, values[i])
	}
	return b
}
