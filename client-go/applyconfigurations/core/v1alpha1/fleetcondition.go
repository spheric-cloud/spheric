// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1alpha1 "spheric.cloud/spheric/api/core/v1alpha1"
)

// FleetConditionApplyConfiguration represents a declarative configuration of the FleetCondition type for use
// with apply.
type FleetConditionApplyConfiguration struct {
	Type               *v1alpha1.FleetConditionType `json:"type,omitempty"`
	Status             *v1.ConditionStatus          `json:"status,omitempty"`
	Reason             *string                      `json:"reason,omitempty"`
	Message            *string                      `json:"message,omitempty"`
	ObservedGeneration *int64                       `json:"observedGeneration,omitempty"`
	LastTransitionTime *metav1.Time                 `json:"lastTransitionTime,omitempty"`
}

// FleetConditionApplyConfiguration constructs a declarative configuration of the FleetCondition type for use with
// apply.
func FleetCondition() *FleetConditionApplyConfiguration {
	return &FleetConditionApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *FleetConditionApplyConfiguration) WithType(value v1alpha1.FleetConditionType) *FleetConditionApplyConfiguration {
	b.Type = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *FleetConditionApplyConfiguration) WithStatus(value v1.ConditionStatus) *FleetConditionApplyConfiguration {
	b.Status = &value
	return b
}

// WithReason sets the Reason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reason field is set to the value of the last call.
func (b *FleetConditionApplyConfiguration) WithReason(value string) *FleetConditionApplyConfiguration {
	b.Reason = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *FleetConditionApplyConfiguration) WithMessage(value string) *FleetConditionApplyConfiguration {
	b.Message = &value
	return b
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *FleetConditionApplyConfiguration) WithObservedGeneration(value int64) *FleetConditionApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithLastTransitionTime sets the LastTransitionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTransitionTime field is set to the value of the last call.
func (b *FleetConditionApplyConfiguration) WithLastTransitionTime(value metav1.Time) *FleetConditionApplyConfiguration {
	b.LastTransitionTime = &value
	return b
}
