// SPDX-FileCopyrightText: 2024 Axel Christ and Spheric contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	storagev1alpha1 "spheric.cloud/spheric/api/storage/v1alpha1"
	internalinterfaces "spheric.cloud/spheric/client-go/informers/internalinterfaces"
	v1alpha1 "spheric.cloud/spheric/client-go/listers/storage/v1alpha1"
	spheric "spheric.cloud/spheric/client-go/spheric"
)

// VolumePoolInformer provides access to a shared informer and lister for
// VolumePools.
type VolumePoolInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.VolumePoolLister
}

type volumePoolInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewVolumePoolInformer constructs a new informer for VolumePool type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVolumePoolInformer(client spheric.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredVolumePoolInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredVolumePoolInformer constructs a new informer for VolumePool type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVolumePoolInformer(client spheric.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1alpha1().VolumePools().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1alpha1().VolumePools().Watch(context.TODO(), options)
			},
		},
		&storagev1alpha1.VolumePool{},
		resyncPeriod,
		indexers,
	)
}

func (f *volumePoolInformer) defaultInformer(client spheric.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredVolumePoolInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *volumePoolInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&storagev1alpha1.VolumePool{}, f.defaultInformer)
}

func (f *volumePoolInformer) Lister() v1alpha1.VolumePoolLister {
	return v1alpha1.NewVolumePoolLister(f.Informer().GetIndexer())
}
